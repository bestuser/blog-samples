<project xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>org.gmazza</groupId>
    <artifactId>blog-samples</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Root POM for Blog Samples</name>
    <description>Source code for web service tutorials at http://www.jroller.com/gmazza/entry/blog_article_index</description>
    <packaging>pom</packaging>

    <modules>
        <module>web_service_tutorial</module>
        <module>soap_client_tutorial</module>
        <module>java_first_web_service</module>
        <module>ssl_for_web_services</module>
        <module>cxf_usernametoken_profile</module>
        <module>metro_usernametoken_profile</module>
        <module>cxf_x509_profile</module>
        <module>metro_x509_profile</module>
        <module>cxf_sts_tutorial</module>
        <module>metro_sts_tutorial</module>
        <module>opensaml_with_web_services</module>
        <module>junit_for_soap_clients</module>
        <module>junit_web_service_testing</module>
        <module>asynchronous_web_service_calls</module>
        <module>jaxws_handler_tutorial</module>
        <module>jaxwshandlers_to_cxfinterceptors</module>
        <module>enhancing_jaxb_artifacts</module>
        <module>updating_databases_with_jaxws</module>
        <module>quartz_scheduled_soap_calls</module>
        <module>soap_contract_xslt_cleanup</module>
        <module>using_mtom_and_apache_fop</module>
        <module>cxf_soap_over_jms</module>
    </modules>

    <prerequisites>
        <maven>3.0</maven>
    </prerequisites>

    <!-- Note web_service_tutorial, java_first_web_service, and soap_client_tutorial  
         poms are standalone (do not reference this pom) to help keep the
         corresponding blog tutorials as clear as possible.
         Others reference this pom and hence rely on the below settings -->

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <cxf.version>2.7.1</cxf.version>
        <spring.version>3.0.7.RELEASE</spring.version>
        <slf4j.version>1.6.2</slf4j.version>
        <wsp.module.name>-- Web Service Provider</wsp.module.name>
        <wspwar.module.name>-- Service WAR file</wspwar.module.name>
        <stswar.module.name>-- STS WAR file</stswar.module.name>
        <wsc.module.name>-- SOAP Client</wsc.module.name>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-web</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-beans</artifactId>
                <version>${spring.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-frontend-jaxws</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-transports-http</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-ws-security</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
               <groupId>org.apache.cxf</groupId>
               <artifactId>cxf-rt-transports-http-jetty</artifactId>
               <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf.services.sts</groupId>
                <artifactId>cxf-services-sts-core</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-ws-mex</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-jdk14</artifactId>
                <version>${slf4j.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <!-- 
                 See http://metro.java.net/guide/Using_Mavenized_Metro_Binaries.html  
                 for more Metro/Maven config info 
            -->
            <dependency>
                <groupId>org.glassfish.metro</groupId>
                <artifactId>webservices-rt</artifactId>
                <version>2.2.1-1</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>servlet-api</artifactId>
                <version>2.5</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.11</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.apache.derby</groupId>
                <artifactId>derby</artifactId>
                <version>10.9.1.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <!--downloadJavadocs>true</downloadJavadocs-->
                    <useProjectReferences>true</useProjectReferences>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- Below plugin provides a separate JAR for the JAX-WS artifacts 
                     (i.e., the objects created by running wsdl2java or wsimport), as this JAR 
                     will also be used by the SOAP client for each web service provider using this plugin. 
                     More info: http://maven.apache.org/plugins/maven-assembly-plugin/ 
                -->
                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>2.4</version>
                    <configuration>
                        <appendAssemblyId>true</appendAssemblyId>
                        <attach>true</attach>
                    </configuration>
                    <executions>
                        <execution>
                            <id>make-assembly</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- Below used with client poms, default params for running client via mvn exec:exec -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.2.1</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>exec</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <executable>java</executable>
                        <arguments>
                            <argument>-classpath</argument>
                            <classpath />
                            <!-- Uncomment below for debug output with CXF. Will 
                                need to configure client-side interceptors and supply a java.util.logging 
                                properties file: http://cxf.apache.org/docs/debugging-and-logging.html 
                                Place the logging file in the client folder. -->
                            <!--argument> 
                                -Djava.util.logging.config.file=mylogging.properties 
                            </argument -->
                            <!-- Uncomment below for debug output with Metro -->
                            <!--argument>
                                -Dcom.sun.xml.ws.transport.http.client.HttpTransportPipe.dump=true
                            </argument-->
                            <argument>
                                client.WSClient
                            </argument>
                        </arguments>
                    </configuration>
                </plugin>
                <!-- Below used with OSGi deployment; in service poms -->
                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <version>2.3.7</version>
                    <extensions>true</extensions>
                </plugin>
                <!-- Below used with CXF service poms -->
                <plugin>
                    <groupId>org.apache.cxf</groupId>
                    <artifactId>cxf-codegen-plugin</artifactId>
                    <version>${cxf.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>wsdl2java</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- Below used with Metro service poms -->
                <plugin>
                    <groupId>org.jvnet.jax-ws-commons</groupId>
                    <artifactId>jaxws-maven-plugin</artifactId>
                    <version>2.2</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>wsimport</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- Below for WAR submodules, defaults for Tomcat deployment.
                     Below uses Tomcat 7, for Tomcat 6 see 
                     http://www.jroller.com/gmazza/entry/web_service_tutorial#WFstep8 
                -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>tomcat-maven-plugin</artifactId>
                    <version>1.1</version>
                    <configuration>
                        <server>myTomcat</server>
                        <url>http://localhost:8080/manager/text</url>
                        <path>/${project.build.finalName}</path>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.tomcat.maven</groupId>
                    <artifactId>tomcat7-maven-plugin</artifactId>
                    <version>2.0</version>
                </plugin>
                <!-- Below for WAR submodules, defaults for when creating the WAR file. --> 
                <plugin>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>2.3</version>
                </plugin>
                <!-- Below activates any integration tests where testcases require
                     the JAR or WAR to be created first (see http://tinyurl.com/7zfp7v7) -->
	            <plugin>
	                <groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-failsafe-plugin</artifactId>
	                <version>2.12.4</version>
	                <executions>
	                    <execution>
	                        <goals>
	                            <goal>integration-test</goal>
	                            <goal>verify</goal>
	                        </goals>
	                    </execution>
	                </executions>
	            </plugin>
	            <plugin>
	                <groupId>org.codehaus.mojo</groupId>
	                <artifactId>xml-maven-plugin</artifactId>
	                <version>1.0</version>
	            </plugin>
            </plugins>        
        </pluginManagement>
    </build>

</project>
